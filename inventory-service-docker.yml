server:
  port: 8073

spring:
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${DB_HOST:host.docker.internal}:5432/${DB_NAME:inventory}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:admin}

  jpa:
    hibernate:
      ddl-auto: update
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  kafka:
    producer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

    consumer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
      group-id: inventory-service
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "java.util,java.lang,com.erp.inventory_service.dto,com.erp.stock_operation_service.dto,com.erp.stock_operation_service.dto,com.erp.stock_adjustments_service.dto,com.erp.sales_order_service.dto"

application:
  config:
    customer-url: http://host.docker.internal:8222/api/v1/customers
    payment-url: http://host.docker.internal:8222/api/v1/payments
    product-url: http://host.docker.internal:8222/api/v1/products

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env
  endpoint:
    health:
      show-details: always
